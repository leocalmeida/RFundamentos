# String
texto <- "Isso é uma string!"
x = as.character(3.14)
x
class(x)
# Concatenando Strings
nome = "Barack"; sobrenome = "Obama"
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saída
sprintf("%s governa os EUA há %d anos", "Barack Obama", 8)
# Extraindo parte da string
texto <- "Isso é uma string!"
substr(texto, start=12, stop=17)
?substr
# Contando o número de caracteres
nchar(texto)
# Alterando a capitalização
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
# Usando stringr
library(stringr)
# Dividindo uma string em caracteres
strsplit("Histogramas e Elementos de Dados", NULL)
# Dividindo uma string em caracteres, após o caracter espaço
strsplit("Histogramas e Elementos de Dados", " ")
# Trabalhando com strings
string1 <- c("Esta é a primeira parte da minha string e será a primeira parte do meu vetor",
"Aqui a minha string continua, mas será transformada no segundo vetor")
string1
string2 <- c("Precisamos testar outras strings - @???!§$",
"Análise de Dados em R")
string2
# Adicionando 2 strings
str_c(c(string1, string2), sep="")
# Podemos contar quantas vezes um caracter aparece no texto
str_count(string2, "s")
# Localiza a primeira e última posição em que o caracter aparece na string
str_locate_all(string2, "s")
# Substitui a primeira ocorrência de um caracter
str_replace(string2, "\\s", "")
# Substitui todas as ocorrências de um caracter
str_replace_all(string2, "\\s", "")
# Detectando padrões nas strings
string1 <- "23 mai 2000"
string2 <- "1 mai 2000"
padrao <- "mai 20"
grepl(pattern = padrao, x = string1)
padrao <- "mai20"
grepl(pattern = padrao, x = string1)
arquivo <- read.csv("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte1/dframe.csv")
txt <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(txt)
aux <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
aux <- readChar("http://www.gutenberg.org/cache/epub/100/pg100.txt")
aux <- readLines("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(aux)
aux <- readLine("http://www.gutenberg.org/cache/epub/100/pg100.txt")
arquivo <- read.csv("dframe.csv")
# Importando arquivo txt
# http://www.gutenberg.org/cache/epub/100/pg100.txt
getwd()
arquivo <- read.csv("Parte1/dframe.csv")
head(arquivo)
tail(arquivo)
str_count(arquivo, "7")
str_locate_all(arquivo, "7")
strtail <- function(s,n=1) {
if(n<0)
substring(s,1-n)
else
substring(s,nchar(s)-n+1) }
strtail("String de teste", 6)
# Criando um dataframe vazio
df <- data.frame()
# Criando um dataframe vazio
df <- data.frame()
# Importando arquivo txt
# http://www.gutenberg.org/cache/epub/100/pg100.txt
txt <- read.table("http://www.gutenberg.org/cache/epub/100/pg100.txt")
class(df)
df
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
pais = c("EUA", "Dinamarca", "Holanda", "Espanha", "Brasil")
nome = c("Maurício", "Pedro", "Aline", "Beatriz", "Marta")
altura = c(1.78, 1.72, 1.63, 1.59, 1.63)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
View(pesquisa)
pesq = cbind(pesquisa, olhos)
# Adicionando um novo vetor a um dataframe existente
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
# Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
# Obtendo um vetor de um dataframe
pesq$pais
pesq$nome
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
# Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos do dataframe
head(pesq)
head(mtcars)
# Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
# Filtro para um subset de dados que atendem a um critério
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
# Dataframes Nomeados
names(pesq) <- c("País", "Nome", "Altura", "Código", "Olhos")
pesq
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
df2 <- data.frame(read.csv(file = 'Parte1/dframe.csv', header = TRUE, sep = ","))
head(df2)
summary(df2)
getwd()
plot(df2$Admdate)
plot(y=df2$Admdate)
plot(x=df2$Admdate)
plot(x=df2$Admdate, y=count(df2$Admdate))
plot(x=df2$Admdate, y=df2$Admdate)
plot(x=df2$Admdate, y=df2$Admdate na.rm=TRUE)
plot(x=df2$Admdate, y=count(df2, df2$Admdate))
plot(x=df2$Admdate, y=df2(table(df2$Admdate)))
plot(x=df2$Admdate, y=df2.(table(df2$Admdate)))
plot(df2$Admdate)
plot(x=df2$Admdate)
plot(df2$Admdate)
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
# Combinando dataframes
df3 <- merge(pesq, df2)
df3
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(1,12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(1:12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(rnorm(1:12))
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- seq(1:12)
vetor
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16),nc=4)
matriz
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16))
matriz
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16),nc=4)
matriz
# Exercício 3 - Crie uma lista unindo o
# vetor e matriz criados anteriormente
lista = list(vetor,matriz)
lista
# Exercício 3 - Crie uma lista unindo o
# vetor e matriz criados anteriormente
lista <- list(vetor,matriz)
lista
# Exercício 4 - Usando a função read.table()
# leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
txt <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
txt
# Exercício 5 - Transforme o dataframe anterior,
# em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(txt) <- c('config','esfc','chang')
txt
iris
head(iris)
dim(iris)
summary(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas
# do dataframe iris
plot(x=iris$Sepal.Length, y=iris$Sepal.Width)
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris[iris$Sepal.Length > 7]
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris[Sepal.Length > 7]
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris["Sepal.Length" > 7]
iris_maiorq7
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
man(subset)
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
help(subset)
iris_maiorq7 <- subset(iris, iris$Sepal.Length>7)
iris_maiorq7
# Exercícios 9 - Crie um dataframe que seja cópia do dataframe iris
# e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages('dplyr')
help(slice)
help(slice)
help(slice())
help(slice)
??slice
?slice
?split
iris_split<- split(iris, iris[1:15])
iris_sliced <- slice(iris, 1:15)
# Carregar o pacote
library(dplyr)
iris_sliced <- slice(iris, 1:15)
iris_sliced
# Exercícios 10 - Use a função filter no seu novo dataframe
# criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
ex10 <- subset(iris_sliced, iris_sliced$Sepal.Length>6)
ex10
# Exercícios 10 - Use a função filter no seu novo dataframe
# criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch("filter")
filter(iris_sliced, Sepal.length>6)
filter(iris_sliced, iris_sliced$Sepal.length>6)
clear
# Interagindo com o sistema operacional
list.files()
.Platform$OS.type
.Platform$file.sep
Sys.Date()
Sys.info()
R.version
?system
system('ls -a')
install.packages("readr")
install.packages("data.table")
library(readr)
library(dplyr)
library(ggplot2)
library(readr)
library(scales)
library(data.table)
system.time(df <- fread("TemperaturasGlobais.csv"))
getwd()
setwd("/home/leonardo/Documents/RFundamentos/Parte2")
system.time(df <- fread("TemperaturasGlobais.csv"))
# Criando subsets dos dados carregados
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil)
head(cidadesBrasil)
nrow(df)
nrow(cidadesBrasil)
dim(cidadesBrasil)
# Convertendo as Datas
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt,format='%Y-%m-%d')
head(cidadesBrasil)
cidadesBrasil$Month <- month(cidadesBrasil$dt)
cidadesBrasil$Year <- year(cidadesBrasil$dt)
head(cidadesBrasil)
# Palmas
plm <- subset(cidadesBrasil, City == 'Palmas')
plm <- subset(plm, Year %in% c(1796,1846,1896,1946,1996,2012))
# Palmas
plm <- subset(cidadesBrasil, City == 'Palmas')
plm <- subset(plm, Year %in% c(1796,1846,1896,1946,1996,2012))
# Curitiba
crt <- subset(cidadesBrasil, City == 'Curitiba')
crt <- subset(crt, Year %in% c(1796,1846,1896,1946,1996,2012))
# Recife
recf <- subset(cidadesBrasil, City=='Recife')
recf <- subset(recf,Year %in% c(1796,1846,1896,1946,1996,2012))
# Construindo os Plots
p_plm <- ggplot(plm, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Palmas") +
theme(plot.title = element_text(size = 18))
p_crt <- ggplot(crt, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Curitiba") +
theme(plot.title = element_text(size = 18))
p_recf <- ggplot(recf, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Recife") +
theme(plot.title = element_text(size = 18))
# Plotando
p_plm
p_crt
p_recf
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
# Variáveis categóricas nominais
# Não existe uma ordem implícita
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
levels(fac_animais)
# Variáveis categóricas ordinais
# Possuem uma ordem natural
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order = TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Macho","Femea")
fac_vec2
summary(fac_vec2)
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea","Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
# Mais exemplos
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
rdata = factor(data,labels=c("I","II","III"))
rdata
# Fatores Não-Ordenados
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
# Transformando os dados. O R apenas criou os níveis, o que não significa que exista uma hierarquia
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
# Fatores Ordenados
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", "B"),
ordered = TRUE)
o.set1
levels(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores Ordenados
o.set1 <- factor(set1,
levels = c("B", "BA", "AA", "CC", "CA"),
ordered = TRUE)
o.set1
is.ordered(o.set1)
levels(o.set1)
# Variáveis do tipo fator
str(df)
# Fatores e Dataframes
df <- read.csv2("etnias.csv", sep = ',')
df
# Variáveis do tipo fator
str(df)
# Níveis dos fatores
# Internamente, o R armazena valores inteiros e faz um mapeamento para as strings (em ordem alfabética)
# e agrupa as estatísticas por níveis. Agora, se fizermos sumarização de estatísticas, é possível visualizar
# a contabilização de  para cada categoria
levels(df$Etnia)
df$Etnia <- factor(df$Etnia)
# Variáveis do tipo fator
str(df)
df$Sexo <- factor(df$Sexo)
# Variáveis do tipo fator
str(df)
# Níveis dos fatores
# Internamente, o R armazena valores inteiros e faz um mapeamento para as strings (em ordem alfabética)
# e agrupa as estatísticas por níveis. Agora, se fizermos sumarização de estatísticas, é possível visualizar
# a contabilização de  para cada categoria
levels(df$Etnia)
summary(df$Etnia)
# Plot
# Agora se fizermos um plot, temos um boxplot para estas variáveis categóricas
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Plot
# Agora se fizermos um plot, temos um boxplot para estas variáveis categóricas
par(mar=c(1,1,1,1))
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Plot
# Agora se fizermos um plot, temos um boxplot para estas variáveis categóricas
par(mar=c(2,2,2,2))
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Plot
?par
?mar
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Regressão
summary(lm(Idade~Etnia, data=df))
# Convertendo uma coluna em variável categórica. Isso criará um fator não-ordenado
df
str(df)
df$Estado_Civil.cat<-factor(df$Estado_Civil, labels=c("Solteiro", "Casado", "Divorciado"))
df
str(df)
