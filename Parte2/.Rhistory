pesq = cbind(pesquisa, olhos)
# Adicionando um novo vetor a um dataframe existente
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
# Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
# Obtendo um vetor de um dataframe
pesq$pais
pesq$nome
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
# Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos do dataframe
head(pesq)
head(mtcars)
# Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
# Filtro para um subset de dados que atendem a um critério
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
# Dataframes Nomeados
names(pesq) <- c("País", "Nome", "Altura", "Código", "Olhos")
pesq
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
df2 <- data.frame(read.csv(file = 'Parte1/dframe.csv', header = TRUE, sep = ","))
head(df2)
summary(df2)
getwd()
plot(df2$Admdate)
plot(y=df2$Admdate)
plot(x=df2$Admdate)
plot(x=df2$Admdate, y=count(df2$Admdate))
plot(x=df2$Admdate, y=df2$Admdate)
plot(x=df2$Admdate, y=df2$Admdate na.rm=TRUE)
plot(x=df2$Admdate, y=count(df2, df2$Admdate))
plot(x=df2$Admdate, y=df2(table(df2$Admdate)))
plot(x=df2$Admdate, y=df2.(table(df2$Admdate)))
plot(df2$Admdate)
plot(x=df2$Admdate)
plot(df2$Admdate)
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
# Combinando dataframes
df3 <- merge(pesq, df2)
df3
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(1,12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(1:12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(rnorm(1:12))
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- c(range(12))
vetor
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor <- seq(1:12)
vetor
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16),nc=4)
matriz
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16))
matriz
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida
# com números inteiros
matriz <- matrix(seq(1:16),nc=4)
matriz
# Exercício 3 - Crie uma lista unindo o
# vetor e matriz criados anteriormente
lista = list(vetor,matriz)
lista
# Exercício 3 - Crie uma lista unindo o
# vetor e matriz criados anteriormente
lista <- list(vetor,matriz)
lista
# Exercício 4 - Usando a função read.table()
# leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
txt <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
txt
# Exercício 5 - Transforme o dataframe anterior,
# em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(txt) <- c('config','esfc','chang')
txt
iris
head(iris)
dim(iris)
summary(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas
# do dataframe iris
plot(x=iris$Sepal.Length, y=iris$Sepal.Width)
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris[iris$Sepal.Length > 7]
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris[Sepal.Length > 7]
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris_maiorq7 <- iris["Sepal.Length" > 7]
iris_maiorq7
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
man(subset)
# Exercício 8 - Usando s função subset,
# crie um novo dataframe com o conjunto de dados do dataframe
# iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
help(subset)
iris_maiorq7 <- subset(iris, iris$Sepal.Length>7)
iris_maiorq7
# Exercícios 9 - Crie um dataframe que seja cópia do dataframe iris
# e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages('dplyr')
help(slice)
help(slice)
help(slice())
help(slice)
??slice
?slice
?split
iris_split<- split(iris, iris[1:15])
iris_sliced <- slice(iris, 1:15)
# Carregar o pacote
library(dplyr)
iris_sliced <- slice(iris, 1:15)
iris_sliced
# Exercícios 10 - Use a função filter no seu novo dataframe
# criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
ex10 <- subset(iris_sliced, iris_sliced$Sepal.Length>6)
ex10
# Exercícios 10 - Use a função filter no seu novo dataframe
# criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch("filter")
filter(iris_sliced, Sepal.length>6)
filter(iris_sliced, iris_sliced$Sepal.length>6)
lst1 <- list(6, "b", 15)
lst1
class(lst1)
unlist(lst1)
vec1 <- unlist(lst1)
class(vec1)
vec1
getwd()
vec1 = 1:4
vec2 <- 1:4
class(vec1)
class(vec2)
typeof(vec1)
typeof(vec2)
mean(x = 1:10)
x
mean(x <- 1:10)
x
search()
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer"))
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
# Carregando o dataset
df <- read.csv('questoes.csv', stringsAsFactors = FALSE)
getwd()
# Carregando o dataset
df <- read.csv('Parte2/questoes.csv', stringsAsFactors = FALSE)
head(df)
# Criando um Corpus
dfCorpus <- Corpus(VectorSource(df$Question))
library(tm_map)
# Exemplo 1
install.packages(c("tm", "tm_map", "SnowballC", "wordcloud", "RColorBrewer"))
install.packages(c("tm", "tm_map", "SnowballC", "wordcloud", "RColorBrewer"))
# Criando um Corpus
dfCorpus <- Corpus(VectorSource(df$Question))
class(dfCorpus)
# Hora e Data do sistema
hoje <- Sys.Date()
hoje
class(hoje)
Sys.time()
Sys.timezone()
require(lubridate)
ymd("20160604")
mdy("06-04-2016")
dmy("04/06/2016")
# Demo
demo("graphics")
demo("graphics")
# Plot Básico
x = 5:7
y = 8:10
plot(x,y)
x
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
# Plotando um Dataframe
?lynx
plot(lynx)
plot(lynx, ylab = "Plots com Dataframes", xlab = "")
plot(lynx, ylab = "Plots com Dataframes", xlab = "Observações")
plot(lynx, main = "Plots com Dataframes", col = 'red')
plot(lynx, main = "Plots com Dataframes", col = 'red', col.main = 52, cex.main = 1.5)
library(datasets)
hist(warpbreaks$breaks)
airquality &lt;- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
?par
par()
par('pch')
par('lty')
x = 2:4
plot(x, pch = "c")
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las = 0, xlab = "xlab", ylab = "ylab", main = "LAS = 0")
plot(1:8, las = 1, xlab = "xlab", ylab = "ylab", main = "LAS = 1")
plot(1:8, las = 2, xlab = "xlab", ylab = "ylab", main = "LAS = 2")
plot(1:8, las = 3, xlab = "xlab", ylab = "ylab", main = "LAS = 3")
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Var1","Var2"))
# Cores disponíveis
colors()
# png
png("Grafico1.png", width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = "Gráfico gerado a partir do Iris")
dev.off()
# pdf
pdf("Grafico2.pdf")
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = "Gráfico gerado a partir do Iris")
# Estendendo as funções do plot
install.packages('plotrix')
# Define os dados
?set.seed
x <- set.seed(67)
set.seed(67)
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
# Cria o Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
# Cria o Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
# Adiciona outros dados
points(z, t, col = "blue", pch = 4)
# Adiciona outros dados
points(y, t, col = 777, pch = 9)
# Cria legenda
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
dev.off()
# Cria o Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
# Adiciona outros dados
points(z, t, col = "blue", pch = 4)
# Adiciona outros dados
points(y, t, col = 777, pch = 9)
# Cria legenda
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
?boxplot
?sleep
# Permite utilizar as colunas sem especificar o mome do dataset
attach(sleep)
# Construção do boxplot
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = "Duração do Sono",
col.main = "red", ylab="Horas", xlab="Droga")
# Cálculo da média
means = by(extra, group, mean)
df = fread('venda_produtos_tratado.csv')
library(data.table)
df = fread('venda_produtos_tratado.csv')
library(dplyr)
df = fread('venda_produtos_tratado.csv')
df = fread('venda_de_produtos_tratado.csv')
str(df)
teste <- by(df, df$grupo, sum)
teste <- by(df$grupo, group , sum)
View(df)
# Permite utilizar as colunas sem especificar o mome do dataset
attach(sleep)
# Permite utilizar as colunas sem especificar o mome do dataset
attach(sleep)
# Construção do boxplot
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = "Duração do Sono",
col.main = "red", ylab="Horas", xlab="Droga")
# Cálculo da média
means = by(extra, group, mean)
# Adiciona a média ao gráfico
points(means, col = "red")
#Boxplot horizontal
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab="", xlab="", horizontal = T)
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab="", xlab="", horizontal = T,
col = c("blue", "red") )
# Definindo os dados
dados = cars$speed
# Construindo um histograma
hist(dados)
hist(dados, breaks = 10)
hist(dados, labels = T, breaks=c(0,5,10,20,30))
hist(dados, labels = T, breaks = 10)
hist(dados, labels = T, ylim = c(0,10), breaks = 10)
# Adicionando linhas ao histograma
hey = hist(dados, breaks = 10)
xaxis = seq(min(dados), max(dados), length = 10)
yaxis = dnorm(xaxis, mean = mean(dados), sd = sd(dados))
yaxis = yaxis*diff(hey$mids)*length(dados)
lines(xaxis, yaxis, col = "red")
# Criando as fatias
fatias = c(40, 20, 40)
# Nomeando os labels
paises = c("Brasil", "Argentina", "Chile")
# Unindo paises e fatias
paises = paste(paises, fatias)
# to further specify the labels
paises = paste(paises, "%", sep = "")
paises = paste(paises, "%", sep = "")
colors()
# Construindo um gráfico
pie(fatias, labels = paises,
col=c("darksalmon", "gainsboro", "lemonchiffon4"),
main ="Dsitribuição de Vendas")
attach(iris)
Values = table(Species)
labels = paste(names(Values))
pie(Values, labels = labels, main = "Distribuição de Espécies")
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col = c("steelblue1", "tomato2", "tan3"),
main = "Dsitribuição de Vendas")
paises = paste(paises, "", sep = "")
# Construindo um gráfico
pie(fatias, labels = paises,
col=c("darksalmon", "gainsboro", "lemonchiffon4"),
main ="Dsitribuição de Vendas")
pie3D(fatias, labels = paises, explode = 0.05,
col = c("steelblue1", "tomato2", "tan3"),
main = "Dsitribuição de Vendas")
# Preparando os dados
casamentos <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67),
nrow = 3, byrow = T)
# Nomeando a matriz
colnames(casamentos) <- c("0","1-150","151-300",">300")
rownames(casamentos) <- c("Casado","Divorciado","Solteiro")
# Construindo o plot
barplot(casamentos)
barplot(casamentos, beside = T)
# Transposta da matriz
barplot(t(casamentos), beside = T)
library(lattice)
getwd
getwd()
setwd("/home/leonardo/Documents/RFundamentos/Parte2")
lista <- list(c(1:3))
sapply(lista, sum)
lista
# Exercício 5 - Transforme a lista anterior um vetor
ex5 <- unlist(lista)
ex5
class(ex5)
type(ex5)
typeof(ex5)
teste <- c(1,2,3)
typeof(teste)
detach(teste)
lista <- list(c(1:3))
# Exercício 5 - Transforme a lista anterior um vetor
ex5 <- unlist(lista)
ex5
# Exercício 6 - Considere a string abaixo. Substitua a palavra textos por frases
str <- c('Expressoes','regulares', 'em linguagem R',
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
?grep()
grep('textos', str, ignore.case = FALSE)
grep('textos', str, ignore.case = FALSE, value = TRUE)
str02 <- gsub('textos', 'frases', str)
str02
attach(mtcars)
mtcars
# Demo
demo("graphics")
set.seed(67)
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
# Cria o Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
par(mar=c(1,1,1,1))
# Cria o Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "indep",
ylab = "depend")
library(ggplot2)
plot(disp, mpg)
disp
mpg
mtcars
mtcars$mpg
mpg
# Exercício 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
detach(mtcars)
plot(mtcars$disp, mtcars$mpg)
?mtcars
plot(mtcars$disp, mtcars$mpg, ylab = 'Miles/(US)gallon', xlab = 'Displacement (cu.in.)')
par(mar=c(1,1,1,1))
plot(mtcars$disp, mtcars$mpg, ylab = 'Miles/(US)gallon', xlab = 'Displacement (cu.in.)')
par(mar=c(2,2,2,2))
plot(mtcars$disp, mtcars$mpg, ylab = 'Miles/(US)gallon', xlab = 'Displacement (cu.in.)')
par(mar=c(5,5,5,5))
plot(mtcars$disp, mtcars$mpg, ylab = 'Miles/(US)gallon', xlab = 'Displacement (cu.in.)')
plot(mtcars$disp, mtcars$mpg, ylab = 'Miles/(US)gallon',
xlab = 'Displacement (cu.in.)', main = 'Scatterplot')
plot(mtcars$disp, mtcars$mpg, ylab = 'Milhas/(US)gallon',
xlab = 'Cilindradas', main = 'Scatterplot')
plot(mtcars$disp, mtcars$mpg, ylab = 'Milhas/(US)gallon',
xlab = 'Cilindradas', main = 'Scatterplot')
?par()
boxplot(mtcars$disp, mtcars$mpg, ylab = 'Milhas/(US)gallon', xlab = 'Cilindradas')
hist((mtcars$disp, mtcars$mpg, ylab = 'Milhas/(US)gallon', xlab = 'Cilindradas'))
hist(mtcars$disp, mtcars$mpg, ylab = 'Milhas/(US)gallon', xlab = 'Cilindradas')
hist(mtcars$disp)
?mtcars
pie(mtcars)
pie(mtcars$disp)
pie(mtcars$mpg)
# fatores
fatores <- factor(disp)
# fatores
fatores <- factor(mtcars$disp)
source('~/Documents/RFundamentos/Parte2/17-Exercicios-Capitulo-3.R', echo=TRUE)
pie(fatores)
fatores
?mtcars
mtcars
# fatores
head(mtcars)
pie(mtcars$cyl)
barplot(mtcars)
m_mtcars <- matrix(mtcars)
barplot(m_mtcars)
m_mtcars
barplot(mtcars$cyl)
# Exercicio 7 - Usando o dataset mtcars, crie um grafico com ggplot do tipo scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
library(ggplot2)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
?aes()
